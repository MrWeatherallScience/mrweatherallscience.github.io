---
title: "Plots Demo"
author: "Alex Weatherall"
date: "2024-01-03"
format:
  html:
    echo: false
    code-fold: true
jupyter: julia-1.10
---

## Electric Plots

See @fig-electric for an example.

```{julia}
#| label: fig-electric
#| fig-cap: "Electric Field Lines"

using CairoMakie, LinearAlgebra

function E(q, rx, ry, x, y)
    d = sqrt((x - rx)^2 + (y - ry)^2)^3
    return (q * (x - rx) / d, q * (y - ry) / d)
end
function charges(; nq=2)
    qs = []
    for i in 1:nq
        q = i % 2 * 2 - 1
        push!(qs, (q, cos(2π * i / nq), sin(2π * i / nq)))
    end
    qs
end
function fieldE(x, y)
    Ex, Ey = 0, 0
    for q in qs
        ex, ey = E(q..., x, y)
        Ex += ex
        Ey += ey
    end
    Point(Ex, Ey)
end

fig = Figure(size=(600, 300))
ax1 = Axis(fig[1, 1]; aspect=DataAspect())
ax2 = Axis(fig[1, 2]; aspect=DataAspect())

qs = charges()
streamplot!(ax1, fieldE, -2 .. 2, -2 .. 2; arrow_size=6, linewidth=0.5,
    colorrange=(-3, 3), colormap=([:black, :black, :orange, :red]))
[scatter!(ax1, Point(qs[i][2:3]), color=qs[i][1] > 0 ? :red : :dodgerblue,
    markersize=10) for i in eachindex(qs)]
qs = charges(; nq=4)
streamplot!(ax2, fieldE, -2 .. 2, -2 .. 2; arrow_size=6, linewidth=0.5,
    colorrange=(-3, 3), colormap=([:black, :black, :orange, :red]))
[scatter!(ax2, Point(qs[i][2:3]), color=qs[i][1] > 0 ? :red : :dodgerblue,
    markersize=10) for i in eachindex(qs)]
limits!(ax2, -2, 2, -2, 2)
hidedecorations!(ax1; grid=false)
hidedecorations!(ax2; grid=false)
fig
```


## Some OJS

### Histogram
See @fig-ojschart for an example.

```{ojs}
//| label: fig-ojschart
//| fig-cap: "A normal distribution of random numbers"
numbers = Float64Array.from({length: 1000}, d3.randomNormal())
height = 250
import {chart as histogram} with {numbers as data, height} from "@d3/histogram@261"
histogram
```


### H-R Diagram

See @fig-hrdiag for more advanced example


An **HR diagram** plots the relationship between stars’ absolute magnitudes (brighter going up) and temperatures (warmer going left). For the large set of stars below, it effectively shows how stars age over time. Data: Hipparcos, Gliese

```{ojs}
//| label: fig-hrdiag
//| fig-cap: "The Herzsprung-Russell Diagram"

chart = {

  // Declare the chart dimensions and margins.
  const width = 928;
  const height = Math.round(width * 1.2)
  const marginTop = 40;
  const marginRight = 40;
  const marginBottom = 40;
  const marginLeft = 40;

  // Ceate the scales.
  const x = d3.scaleLinear([-0.39, 2.19], [marginLeft, width - marginRight]);
  const y = d3.scaleLinear([-7, 19], [marginTop, height - marginBottom]);
  const z = bv2rgb;

  // Create the SVG container.
  const svg = d3.create("svg")
      .attr("width", width + 28)
      .attr("height", height)
      .attr("viewBox", [-14, 0, width + 28, height])
      .attr("style", "max-width: calc(100% + 28px); height: auto;")
      .style("margin", "0 -14px")
      .style("background", "#000")
      .style("color", "#fff")
      .style("display", "block")
      .attr("fill", "currentColor")
      .attr("font-family", "sans-serif")
      .attr("font-size", 10);

  // Create a small (sub pixel) rectangle for each star.
  svg.append("g")
    .selectAll("rect")
    .data(data)
    .join("rect")
      .attr("x", d => x(d.color))
      .attr("y", d => y(d.absolute_magnitude))
      .attr("fill", d => z(d.color))
      .attr("width", 0.75)
      .attr("height", 0.75);

  // Create the axes.
  svg.append("g")
      .attr("transform", `translate(${marginLeft},0)`)
      .call(d3.axisLeft(d3.scaleLog(y.domain().map(m => Math.pow(10, 4.83 - m)), y.range())));

  svg.append("g")
      .attr("transform", `translate(${width - marginRight},0)`)
      .call(d3.axisRight(y).ticks(null, "+"));

  svg.append("g")
      .attr("transform", `translate(0,${height - marginBottom})`)
      .call(d3.axisBottom(x).ticks(null, "+f"));

  svg.append("g")
      .attr("transform", `translate(0,${marginTop})`)
      .call(((temperatures) => d3.axisTop(x)
          .tickValues(temperatures.map(color))
          .tickFormat((_, i) => temperatures[i].toLocaleString("en")))
        (d3.range(3000, 10001, 1000).concat(20000)));

  svg.selectAll(".domain").remove();

  svg.append("text")
      .attr("dy", 12)
      .attr("text-anchor", "middle")
      .attr("transform", `translate(${marginLeft},${(marginTop + height - marginBottom) / 2}) rotate(-90)`)
      .call(text => text.append("tspan").attr("fill-opacity", 0.8).text("← darker\xa0"))
      .call(text => text.append("tspan").attr("font-weight", "bold").text("\xa0Luminosity L☉\xa0"))
      .call(text => text.append("tspan").attr("fill-opacity", 0.8).text("\xa0brighter →"));

  svg.append("text")
      .attr("dy", -6)
      .attr("text-anchor", "middle")
      .attr("transform", `translate(${width - marginRight},${(marginTop + height - marginBottom) / 2}) rotate(-90)`)
      .call(text => text.append("tspan").attr("fill-opacity", 0.8).text("← darker\xa0"))
      .call(text => text.append("tspan").attr("font-weight", "bold").text("\xa0Absolute magnitude M\xa0"))
      .call(text => text.append("tspan").attr("fill-opacity", 0.8).text("\xa0brighter →"));

  svg.append("text")
      .attr("x", (marginLeft + width - marginRight) / 2)
      .attr("y", marginTop)
      .attr("dy", 12)
      .attr("text-anchor", "middle")
      .call(text => text.append("tspan").attr("fill-opacity", 0.8).text("← hotter\xa0"))
      .call(text => text.append("tspan").attr("font-weight", "bold").text("\xa0Temperature K\xa0"))
      .call(text => text.append("tspan").attr("fill-opacity", 0.8).text("\xa0colder →"));

  svg.append("text")
      .attr("x", (marginLeft + width - marginRight) / 2)
      .attr("y", height - marginBottom)
      .attr("dy", -6)
      .attr("text-anchor", "middle")
      .call(text => text.append("tspan").attr("fill-opacity", 0.8).text("← blue\xa0"))
      .call(text => text.append("tspan").attr("font-weight", "bold").text("\xa0Color B-V\xa0"))
      .call(text => text.append("tspan").attr("fill-opacity", 0.8).text("\xa0red →"));

  return svg.node();
}

function bv2rgb(bv) {
  bv = Math.max(-0.4, Math.min(2, bv));
  let t;
  return `#${[
    bv < 0 ? (t = (bv + 0.4) / 0.4, 0.61 + (0.11 * t) + (0.1 * t * t))
      : bv < 0.4 ? (t = bv / 0.4, 0.83 + (0.17 * t))
      : 1,
    bv < 0 ? (t = (bv + 0.4) / 0.4, 0.70 + (0.07 * t) + (0.1 * t * t))
      : bv < 0.4 ? (t = bv / 0.4, 0.87 + (0.11 * t))
      : bv < 1.6 ? (t = (bv - 0.4) / 1.20, 0.98 - (0.16 * t))
      : (t = (bv - 1.6) / 0.4, 0.82 - (0.5 * t * t)), 
    bv < 0.4 ? 1
      : bv < 1.5 ? (t = (bv - 0.4) / 1.1, 1 - (0.47 * t) + (0.1 * t * t))
      : bv < 1.94 ? (t = (bv - 1.5) / 0.44, 0.63 - (0.6 * t * t))
      : 0
  ].map(t => Math.round(t * 255).toString(16).padStart(2, "0")).join("")}`;
}

function temperature(color) {
  return 4600 * (1 / (0.92 * color + 1.7) + 1 / (0.92 * color + 0.62));
}

function color(temperature) {
  const u = 8464 / temperature;
  return (u - 2.1344 + Math.hypot(0.9936, u)) / 1.6928;
}

data = [{absolute_magnitude: 5.9972302965488815, color: 0.999}
  ,{absolute_magnitude: 5.867218690714374, color: 0.74}
  ,{absolute_magnitude: 3.8725422831266023, color: 0.489}
  ,{absolute_magnitude: -0.2952781368990891, color: 0.955}
  ,{absolute_magnitude: 3.6955017489646824, color: 0.516}
  ,{absolute_magnitude: 2.983017179817981, color: 0.456}
  ,{absolute_magnitude: 2.927544375368859, color: 0.466}
  ,{absolute_magnitude: 2.1821239918240387, color: 0.514}
  ,{absolute_magnitude: 5.653637361046087, color: 0.778}
  ,{absolute_magnitude: 2.736028469766552, color: 0.475}
  , {absolute_magnitude: 0.6740802995803534, color: 1.032}
  , {absolute_magnitude: 7.790972791954928, color: 1.15}
  , {absolute_magnitude: 7.193646670438401, color: 1.03}
  , {absolute_magnitude: 6.03172724660611, color: 0.863}
  , {absolute_magnitude: 4.218072092754523, color: 0.52}
  , {absolute_magnitude: -0.022041838524758717, color: -0.047}
  , {absolute_magnitude: 6.434954552631687, color: 0.94}
  , {absolute_magnitude: 4.388111310295262, color: 0.671}
  , {absolute_magnitude: 4.205730486920487, color: 0.566}
  , {absolute_magnitude: 5.502280497869052, color: 0.642}]
```